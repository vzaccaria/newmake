// Generated by LiveScript 1.3.1
(function(){
  "use strict";
  var debug, _module, join$ = [].join;
  debug = require('debug')('backends/make');
  _module = function(){
    var printPhonyTarget, removeProducts, printCleanTargets, printTarget, iface;
    printPhonyTarget = function(node, names){
      return (function(){
        return " \n.PHONY: " + this.targetName + "\n" + this.targetName + ": " + join$.call(names, ' ') + "\n";
      }.call(node.model));
    };
    removeProducts = function(names){
      var i$, len$, p, results$ = [];
      for (i$ = 0, len$ = names.length; i$ < len$; ++i$) {
        p = names[i$];
        results$.push("\t\trm " + p);
      }
      return results$;
    };
    printCleanTargets = function(tb){
      return console.log("clean:\n" + join$.call(removeProducts(tb.allProducts), '\n'));
    };
    printTarget = function(name, node){
      return (function(){
        var ref$, i$, len$, c;
        if (this.builds != null && ((ref$ = this.type) === "compile" || ref$ === "process" || ref$ === "move")) {
          for (i$ = 0, len$ = (ref$ = this.builds).length; i$ < len$; ++i$) {
            c = ref$[i$];
            console.log("\n" + c.product + ": " + c.source + " " + join$.call(c.deps, ' ') + "\n      " + c.command);
          }
        }
        if (this.builds != null && in$(this.type, ["reduce"])) {
          for (i$ = 0, len$ = (ref$ = this.builds).length; i$ < len$; ++i$) {
            c = ref$[i$];
            console.log("\n" + c.product + ": " + join$.call(c.deps, ' ') + "\n      " + c.command);
          }
        }
        return console.log(" \n.PHONY: " + this.targetName + "\n" + this.targetName + ": " + join$.call(this.products, ' ') + "\n");
      }.call(node.model));
    };
    iface = {
      transcript: function(tb){
        var i$, ref$, len$, v, k;
        for (i$ = 0, len$ = (ref$ = tb.phonyTargets).length; i$ < len$; ++i$) {
          v = i$;
          k = ref$[i$];
          printPhonyTarget(k, v);
        }
        for (k in ref$ = tb.allTargets) {
          v = ref$[k];
          printTarget(k, v);
        }
        return printCleanTargets(tb);
      }
    };
    return iface;
  };
  module.exports = _module();
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
