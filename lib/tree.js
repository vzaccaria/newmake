// Generated by LiveScript 1.3.1
(function(){
  "use strict";
  var TreeModel, debug, uid, _, tree, emptyNode, treeBuilder, parse, dump, getTargets, transcript;
  TreeModel = require('tree-model');
  debug = require('debug')('tree');
  uid = require('uid');
  _ = require('lodash');
  tree = new TreeModel();
  emptyNode = function(){
    return tree.parse({});
  };
  treeBuilder = (function(){
    treeBuilder.displayName = 'treeBuilder';
    var prototype = treeBuilder.prototype, constructor = treeBuilder;
    function treeBuilder(){
      this.parse = bind$(this, 'parse', prototype);
      this.processFiles = bind$(this, 'processFiles', prototype);
      this.compileFiles = bind$(this, 'compileFiles', prototype);
      this.createTree = bind$(this, 'createTree', prototype);
      this.collect = bind$(this, 'collect', prototype);
      this.curNode = tree.parse({
        root: true
      });
    }
    prototype.collect = function(name, body, options){
      var t;
      debug("Creating " + name);
      t = this.createTree(body);
      t.model.targetName = name;
      t.model.options = options;
      return this.curNode.addChild(t);
    };
    prototype.createTree = function(body){
      var newNode, savedCurNode;
      newNode = emptyNode();
      savedCurNode = this.curNode;
      this.curNode = newNode;
      body.apply(this, [this]);
      this.curNode = savedCurNode;
      debug(newNode);
      return newNode;
    };
    prototype.compileFiles = function(cmd, src, deps){
      debug("Compile " + src);
      return this.curNode.addChild(tree.parse({
        cmd: cmd,
        src: src,
        deps: deps,
        targetName: "c-" + uid(8)
      }));
    };
    prototype.processFiles = function(cmd, ext, body){
      var t;
      t = this.createTree(body);
      t.model = {
        cmd: cmd,
        ext: ext,
        targetName: "p-" + uid(8)
      };
      return this.curNode.addChild(t);
    };
    prototype.parse = function(body){
      var t;
      t = this.createTree(body);
      this.curNode = t;
      return this.curNode.model.root = true;
    };
    return treeBuilder;
  }());
  parse = function(body){
    var tb;
    tb = new treeBuilder();
    tb.parse(body);
    return tb;
  };
  dump = function(tb){
    return tb.curNode.walk({
      strategy: 'post'
    }, function(node){
      return console.log(node.model);
    });
  };
  getTargets = function(tb, node){
    var ts, startingNode;
    ts = [];
    if (node == null) {
      startingNode = tb.curNode;
    } else {
      if (_.isString(node)) {
        startingNode = tb.curNode.first(function(n){
          return n.model.targetName === node;
        });
      } else {
        startingNode = node;
      }
    }
    startingNode.walk({
      strategy: 'post'
    }, function(node){
      if (node.model.targetName != null) {
        return ts = ts.concat([node.model.targetName]);
      }
    });
    return ts;
  };
  transcript = function(tb){
    var t, i$, len$, x, results$ = [];
    t = getTargets(tb);
    for (i$ = 0, len$ = t.length; i$ < len$; ++i$) {
      x = t[i$];
      results$.push(console.log("Target " + x + " depends on " + getTargets(tb, x)));
    }
    return results$;
  };
  module.exports = {
    parse: parse,
    getTargets: getTargets,
    transcript: transcript
  };
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
